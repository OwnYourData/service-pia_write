} else {
stop('invalid format: attribute "map" missing')
}
merge <- ''
if('merge' %in% names(configParsed)){
merge <- configParsed$merge
}
srcPath <- '/Users/christoph/oyd/service-pia_write/docker/srv-pia_write/script/'
source(paste0(srcPath, 'srvBase.R'))
source(paste0(srcPath, 'srvHelper.R'))
source(paste0(srcPath, 'general.R'))
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
# option: delete all items before import ====
if(delete_all){
deleteRepo(app, repo_url)
}
configParsed$map
length(configParsed$map)
i<-1
el <- configParsed$map[[i]]
el
key <- names(el)
val <- el$key
el
key
val <- el[key]
val <- as.character(el[key])
inputParsed[val]
# create data.frame from input with new mapping
new_items <- data.frame()
new_items[key] <- inputParsed[val]
new_items
col <- inputParsed[val]
col
new_items <- as.data.frame(col)
new_items
colnames(new_items) <- c(key)
new_items
# create data.frame from input with new mapping
new_items <- data.frame()
i<-1
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
nrow(inputParsed)
old_names <- colnames(new_items)
new_items <- cbind(new_items, inputParsed[val])
old_names <- colnames(new_items)
new_items <- as.data.frame(inputParsed[val])
colnames(new_items) <- c(old_names, key)
new_items
length(configParsed$map)
i<-2
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
n
old_names <- colnames(new_items)
nrow(new_items)
new_items <- cbind(new_items, inputParsed[val])
new_items
inputParsed[val]
val
View(inputParsed)
inputParsed <- as.data.frame(jsonlite::fromJSON(input_single))
inputParsed <- as.data.frame(input_single)
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
nrow(inputParsed)
length(configParsed$map)
write_config <- '{
"pia_url":    "https://test.data-vault.eu",
"app_key":    "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da",
"app_secret": "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427",
"repo":       "eu.ownyourdata.online.temperature_voeslau",
"map":[
{ "date":  "timestamp" },
{ "value": "value" }
]
}'
configParsed <- jsonlite::fromJSON(write_config, simplifyVector = FALSE)
length(configParsed$map)
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
nrow(inputParsed)
old_names <- colnames(new_items)
nrow(new_items)
new_items
inputParsed[val]
new_items <- cbind(new_items, inputParsed[val])
new_items
colnames(new_items) <- c(old_names, key)
new_items
inputParsed <- input_multi
write_config <- '{
"pia_url":    "https://test.data-vault.eu",
"app_key":    "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da",
"app_secret": "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427",
"repo":       "eu.ownyourdata.allergy.pollination_voeslau",
"map":[
{ "date":     "timestamp" },
{ "pollType": "pollType" },
{ "value":    "value" }
]
}'
configParsed <- jsonlite::fromJSON(write_config, simplifyVector = FALSE)
# create data.frame from input with new mapping
new_items <- data.frame()
length(configParsed$map)
i<-1
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
nrow(inputParsed)
old_names <- colnames(new_items)
new_items <- as.data.frame(inputParsed[val])
View(new_items)
colnames(new_items) <- c(old_names, key)
View(new_items)
i<-2
el <- configParsed$map[[i]]
key <- names(el)
old_names <- colnames(new_items)
new_items <- cbind(new_items, inputParsed[val])
View(new_items)
el
key <- names(el)
val <- as.character(el[key])
new_items[, 2]
names(el)
"asdf" %in% names(el)
"asdf" !%in% names(el)
!("asdf" %in% names(el))
??unite_
localExecute <- TRUE
write_config <- '{
"pia_url":    "https://test.data-vault.eu",
"app_key":    "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da",
"app_secret": "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427",
"repo":       "eu.ownyourdata.allergy.pollination_voeslau",
"map":[
{ "date":     "timestamp" },
{ "pollType": "pollType" },
{ "value":    "value" }
]
}'
configParsed <- jsonlite::fromJSON(write_config, simplifyVector = FALSE)
input <- '[{"timestamp":"2018-01-04T12:00:00Z","pollType":"Zypressengewächse (Cupressaceae)","value":4},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Zypressengewächse (Cupressaceae)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Zypressengewächse (Cupressaceae)","value":1},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Erle (Alnus)","value":1},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Erle (Alnus)","value":2},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Erle (Alnus)","value":4},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Hasel (Corylus)","value":4},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Hasel (Corylus)","value":3},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Hasel (Corylus)","value":4},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Esche (Fraxinus)","value":1},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Esche (Fraxinus)","value":2},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Esche (Fraxinus)","value":2},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Birke (Betula)","value":2},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Birke (Betula)","value":2},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Birke (Betula)","value":3},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Platane (Platanus)","value":2},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Platane (Platanus)","value":3},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Platane (Platanus)","value":3},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Gräser (Poaceae)","value":4},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Gräser (Poaceae)","value":3},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Gräser (Poaceae)","value":1},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Roggen (Secale)","value":4},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Roggen (Secale)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Roggen (Secale)","value":2},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Nessel- und Glaskraut (Urticaceae)","value":3},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Nessel- und Glaskraut (Urticaceae)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Nessel- und Glaskraut (Urticaceae)","value":2},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Ölbaum (Olea)","value":3},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Ölbaum (Olea)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Ölbaum (Olea)","value":3},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Beifuß (Artemisia)","value":1},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Beifuß (Artemisia)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Beifuß (Artemisia)","value":1},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Ragweed (Ambrosia)","value":1},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Ragweed (Ambrosia)","value":1},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Ragweed (Ambrosia)","value":2},{"timestamp":"2018-01-04T12:00:00Z","pollType":"Pilzsporen (Alternaria)","value":1},{"timestamp":"2018-01-05T12:00:00Z","pollType":"Pilzsporen (Alternaria)","value":3},{"timestamp":"2018-01-06T12:00:00Z","pollType":"Pilzsporen (Alternaria)","value":4}]'
inputParsed <- as.data.frame(jsonlite::fromJSON(input))
# validation ====
pia_url <- ''
if('pia_url' %in% names(configParsed)){
pia_url <- configParsed$pia_url
} else {
stop('invalid format: attribute "pia_url" missing')
}
app_key <- ''
if('app_key' %in% names(configParsed)){
app_key <- configParsed$app_key
} else {
stop('invalid format: attribute "app_key" missing')
}
app_secret <- ''
if('app_secret' %in% names(configParsed)){
app_secret <- configParsed$app_secret
} else {
stop('invalid format: attribute "app_secret" missing')
}
repo <- ''
if('repo' %in% names(configParsed)){
repo <- configParsed$repo
} else {
stop('invalid format: attribute "repo" missing')
}
repo_name <- ''
if('repo_name' %in% names(configParsed)){
repo <- configParsed$repo_name
} else {
repo_name <- repo
}
delete_all <- FALSE
if('delete' %in% names(configParsed)){
if(configParsed$delete != 'all'){
stop('invalid input: attribute "delete" has invalid value')
}
delete_all <- TRUE
}
if(!('map' %in% names(configParsed))){
stop('invalid format: attribute "map" missing')
}
# load helpeR ====
if(localExecute){
srcPath <- '/Users/christoph/oyd/service-pia_write/docker/srv-pia_write/script/'
} else {
srcPath <- '/srv-pia_write/'
}
source(paste0(srcPath, 'srvBase.R'))
source(paste0(srcPath, 'srvHelper.R'))
source(paste0(srcPath, 'general.R'))
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
app$url
app
# option: delete all items before import ====
if(delete_all){
deleteRepo(app, repo_url)
}
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
app
repo_url <- itemsUrl(app$url, repo)
# option: delete all items before import ====
if(delete_all){
deleteRepo(app, repo_url)
}
# partial: subset of input ===
if('partial' %in% names(configParsed)){
inputParsed <- inputParsed[configParsed$partial]
}
# create data.frame from input with new mapping
new_items <- data.frame()
for(i in 1:length(configParsed$map)){
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
old_names <- colnames(new_items)
if(nrow(new_items) == 0){
new_items <- as.data.frame(inputParsed[val])
} else {
new_items <- cbind(new_items, inputParsed[val])
}
colnames(new_items) <- c(old_names, key)
}
"merge" %in% names(configParsed)
write_config <- '{
"pia_url":    "https://test.data-vault.eu",
"app_key":    "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da",
"app_secret": "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427",
"repo":       "eu.ownyourdata.allergy.pollination_voeslau",
"merge":["date", "pollType"],
"map":[
{ "date":     "timestamp" },
{ "pollType": "pollType" },
{ "value":    "value" }
]
}'
configParsed <- jsonlite::fromJSON(write_config, simplifyVector = FALSE)
"merge" %in% names(configParsed)
pia_items <- readItems(app, repo_url)
app
repo_url
View(readItems)
respData <- readRawItems(app, repo_url)
View(readRawItems)
page_size = 2000
headers <- defaultHeaders(app$token)
url_data <- paste0(repo_url, '?size=', page_size)
header <- RCurl::basicHeaderGatherer()
doc <- tryCatch(
RCurl::getURI(url_data,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response <- NA
respData <- data.frame()
recs <- tryCatch(
as.integer(header$value()[['X-Total-Count']]),
error = function(e) { return(0) })
response <- tryCatch(
RCurl::getURL(
url_data,
.opts=list(httpheader=headers)),
error = function(e) { return(NA) })
respData <- r2d(response)
is.na(response)
nchar(response)
retVal <- jsonlite::fromJSON(response)
length(retVal)
'error' %in% names(retVal)
'message' %in% names(retVal)
# convert list to data.frame
tmp <- jsonlite::fromJSON(response)
typeof(tmp)
tmp <- lapply(tmp, jsonlite::fromJSON)
View(tmp)
pia_items <- readItems(app, repo_url)
configParsed$merge
data <- pia_items
fields <- configParsed$merge
nrow(data)
pia_items <- readItems(app, repo_url)
pia_items <- createDigest(pia_items, configParsed$merge)
data <- new_items
nrow(data)
data <- tidyr::unite_(data, 'merged',
fields,
remove=FALSE)
class(data)
data[1,]
class(data[1,])
fields
class(fields)
unlist(fields)
new_items <- createDigest(new_items, unlist(configParsed$merge))
??digest
data <- tidyr::unite_(data, 'merged',
fields,
remove=FALSE)
fields <- unlist(fields)
data$digest <- sapply(data$merged, digest::digest)
data <- tidyr::unite_(data, 'merged',
fields,
remove=FALSE)
data$digest <- sapply(data$merged, digest::digest)
data[, c(fields,  'digest')]
new_items <- createDigest(new_items, unlist(configParsed$merge))
localExecute <- TRUE
srcPath <- '/Users/christoph/oyd/service-pia_write/docker/srv-pia_write/script/'
source(paste0(srcPath, 'srvBase.R'))
source(paste0(srcPath, 'srvHelper.R'))
source(paste0(srcPath, 'general.R'))
new_items <- createDigest(new_items, unlist(configParsed$merge))
# create data.frame from input with new mapping
new_items <- data.frame()
for(i in 1:length(configParsed$map)){
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
old_names <- colnames(new_items)
if(nrow(new_items) == 0){
new_items <- as.data.frame(inputParsed[val])
} else {
new_items <- cbind(new_items, inputParsed[val])
}
colnames(new_items) <- c(old_names, key)
}
source(paste0(srcPath, 'srvHelper.R'))
new_items <- createDigest(new_items, unlist(configParsed$merge))
View(new_items)
# create data.frame from input with new mapping
new_items <- data.frame()
for(i in 1:length(configParsed$map)){
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
old_names <- colnames(new_items)
if(nrow(new_items) == 0){
new_items <- as.data.frame(inputParsed[val])
} else {
new_items <- cbind(new_items, inputParsed[val])
}
colnames(new_items) <- c(old_names, key)
}
new_items <- createDigest(new_items, unlist(configParsed$merge))
# create data.frame from input with new mapping
new_items <- data.frame()
for(i in 1:length(configParsed$map)){
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
old_names <- colnames(new_items)
if(nrow(new_items) == 0){
new_items <- as.data.frame(inputParsed[val])
} else {
new_items <- cbind(new_items, inputParsed[val])
}
colnames(new_items) <- c(old_names, key)
}
source(paste0(srcPath, 'srvHelper.R'))
new_items <- createDigest(new_items, unlist(configParsed$merge))
View(new_items)
i<- 1
new_items[i, !(colnames(new_ites) %in% c('digest'))]
new_items[i, !(colnames(new_items) %in% c('digest'))]
for(i in 1:nrow(new_items)){
if(!(new_items[i,'digest'] %in% pia_items$digest)){
writeItem(app, repo_url,
new_items[i, !(colnames(new_items) %in% c('digest'))])
}
}
new_items[i, !(colnames(new_items) %in% c('digest'))]
as.list(new_items[i, !(colnames(new_items) %in% c('digest'))])
for(i in 1:nrow(new_items)){
if(!(new_items[i,'digest'] %in% pia_items$digest)){
writeItem(app, repo_url,
as.list(new_items[i, !(colnames(new_items) %in% c('digest'))]))
}
}
pia_items <- readItems(app, repo_url)
View(pia_items)
pia_items <- createDigest(pia_items, unlist(configParsed$merge))
pia_items <- readItems(app, repo_url)
pia_items <- createDigest(pia_items, unlist(configParsed$merge))
configParsed$merge
pia_items <- readItems(app, repo_url)
data <- pia_items
fields <- unlist(configParsed$merge)
nrow(data)
data <- tidyr::unite_(data, 'merged',
fields,
remove=FALSE)
View(data)
data$digest <- sapply(data$merged, digest::digest)
t <- data[, !(colnames(data) %in% c('merged'))]
colnames(data)
t <- data[, -'merged']
View(t)
pia_items <- readItems(app, repo_url)
pia_items <- createDigest(pia_items, unlist(configParsed$merge))
source(paste0(srcPath, 'srvHelper.R'))
pia_items <- readItems(app, repo_url)
pia_items <- createDigest(pia_items, unlist(configParsed$merge))
new_items <- createDigest(new_items, unlist(configParsed$merge))
# create data.frame from input with new mapping
new_items <- data.frame()
for(i in 1:length(configParsed$map)){
el <- configParsed$map[[i]]
key <- names(el)
val <- as.character(el[key])
old_names <- colnames(new_items)
if(nrow(new_items) == 0){
new_items <- as.data.frame(inputParsed[val])
} else {
new_items <- cbind(new_items, inputParsed[val])
}
colnames(new_items) <- c(old_names, key)
}
new_items <- createDigest(new_items, unlist(configParsed$merge))
data <- new_items
fields
nrow(data)
data <- tidyr::unite_(data, 'merged',
fields,
remove=FALSE)
View(data)
data$digest <- sapply(data$merged, digest::digest)
data[, -'merged']
data[, -c('merged')]
nrow(data)
View(data)
new_items
new_items[1, ]
as.list(new_items[1, ])
as.character(as.list(new_items[1, ]))
paste(as.character(as.list(new_items[1, ])))
paste(as.character(as.list(new_items[1, ])), collapse = " ")
load("~/oyd/service-pia_write/docker/srv-pia_write/tmpItems.RData")
new_items
as.list(new_items)
as.character(as.list(new_items))
pia_url <- "https://test.data-vault.eu"
app_key <- "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da"
app_secret <- "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427"
pia_url <- "https://test.data-vault.eu"
app_key <- "41e3efbfbc207ba7cb2452086d2429341a4da52b30bd366d3e43c7d71ab829da"
app_secret <- "b159d4833a9188d17769a3c83d30c41ffe187722a870c3b85067011f010a0427"
source('~/oyd/service-pia_write/docker/srv-pia_write/script/srvBase.R')
source('~/oyd/service-pia_write/docker/srv-pia_write/script/srvHelper.R')
source('~/oyd/service-pia_write/docker/srv-pia_write/script/general.R')
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
repo <- "eu.ownyourdata.online.temperature_voeslau"
repo_url <- itemsUrl(app$url, repo)
public_key <- getRepoPubKey(app, repo_url)
public_key <- getRepoPubKey(app, repo_url)
headers <- defaultHeaders(app$token)
url_data <- paste0(app$url, '/api/repos/', repo, '/pub_key')
header <- RCurl::basicHeaderGatherer()
doc <- tryCatch(
RCurl::getURI(url_data,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
public_key <- getRepoPubKey(app, repo)
headers <- defaultHeaders(app$token)
url_data <- paste0(app$url, '/api/repos/', repo, '/pub_key')
header <- RCurl::basicHeaderGatherer()
RCurl::getURI(url_data,
.opts=list(httpheader = headers),
headerfunction = header$update)
RCurl::getURI(url_data,
.opts=list(httpheader = headers),
headerfunction = header$update)
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
public_key <- getRepoPubKey(app, repo)
source('~/oyd/service-pia_write/docker/srv-pia_write/script/srvBase.R')
source('~/oyd/service-pia_write/docker/srv-pia_write/script/srvHelper.R')
source('~/oyd/service-pia_write/docker/srv-pia_write/script/general.R')
# connect to PIA ====
app <- setupApp(pia_url, app_key, app_secret, '')
repo_url <- itemsUrl(app$url, repo)
public_key <- getRepoPubKey(app, repo)
if(nchar(public_key) > 0){
app$encryption <- data.frame(
repo = as.character(repo),
key  = public_key,
read = FALSE,
stringsAsFactors = FALSE
)
}
app$encryption
